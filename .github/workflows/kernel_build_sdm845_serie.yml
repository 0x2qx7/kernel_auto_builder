name: Build KernelSU-Next for the whole sdm845 serie (Polaris/Beryllium/Ursa/Perseus/Equuleus/Dipper)

on:
  push:
    branches:
      - sdm845
  pull_request:
    branches:
      - sdm845
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: üìÇ Checkout builder's sourcecode and get files
        uses: actions/checkout@v4

      - name: ‚ö° Checkout kernel's sourcecode and clone submodules
        run: |
          git clone https://github.com/tedomi2705/kernel_xiaomi_sdm845 -b vic-ksu

      - name: üìÖ Export date of build
        run: |
          echo "DATE=$(date +%d%m%Y)" >> $GITHUB_ENV

      - name: üîÑ Update KernelSU-Next
        run: |
          cd kernel_xiaomi_sdm845
          rm -rf KernelSU-Next
          git clone https://github.com/KernelSU-Next/KernelSU-Next -b v1.0.5

      - name: üì• Clone AnyKernel3
        run: |
          cd kernel_xiaomi_sdm845
          git clone -b sdm845 https://github.com/Oneloutre/AnyKernel3.git anykernel
          rm -rf anykernel/.git

      - name: üì¶ Install d√©pendencies
        run: |
          sudo apt-get update -y -qq
          sudo apt-get install -y --no-install-recommends \
          python3-pip \
          git \
          zip \
          unzip \
          gcc \
          g++ \
          make \
          ninja-build \
          file \
          bc \
          bison \
          flex \
          libfl-dev \
          libssl-dev \
          libelf-dev \
          wget \
          build-essential \
          python3-dev \
          python3-setuptools \
          rsync \
          ccache \
          llvm-dev
          sudo apt install flex libncurses6 libncurses5 binutils-aarch64-linux-gnu device-tree-compiler \
          android-sdk-libsparse-utils python2
          sudo apt install -y gcc-arm-linux-gnueabi
          echo "CROSS_COMPILE_ARM32=arm-linux-gnueabi-" >> $GITHUB_ENV

      - name: üîß Install Clang from a Github action
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "18.1.8"
          directory: ${{ runner.temp }}/llvm

      - name: üîß Add Clang to the PATH
        run: |
          echo "${{ runner.temp }}/llvm/bin" >> $GITHUB_PATH

      - name: üöÄ Enable ccache to speed the build up
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 7G

      - name: üîç Polaris - codename and kernel's version
        run: |
          cd kernel_xiaomi_sdm845
          DEVICE_CODENAME=polaris
          KERNEL_VERSION=$(make kernelversion | tail -n 2 | head -n 1)

          echo "Device Codename: $DEVICE_CODENAME"
          echo "Kernel Version: $KERNEL_VERSION"

          echo "DEVICE_CODENAME=$DEVICE_CODENAME" >> $GITHUB_ENV
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV

      - name: üõ†Ô∏è Build Polaris's kramel
        run: |
          cd kernel_xiaomi_sdm845
          export ARCH=arm64
          export KBUILD_COMPILER_STRING=$(clang --version | head -n 1)
          export CCACHE_EXEC=$(which ccache)
          export KBUILD_BUILD_HOST="Hayasaka-Github-actions-Onelots"

          make O=out ARCH=arm64 vendor/xiaomi/mi845_defconfig vendor/debugfs.config vendor/kernelsu.config vendor/xiaomi/${DEVICE_CODENAME}.config V=1
          make O=out ARCH=arm64 olddefconfig
          make -j$(nproc --all) O=out -j"$(nproc --all)" \
          ARCH=arm64 \
          CC="ccache clang" \
          LLVM=1 \
          LLVM_IAS=1 \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-android- \
          CROSS_COMPILE_ARM32=arm-linux-androideabi-

      - name: üöÄ Copy Polaris's kernel to AnyKernel3 then create the zip
        run: |
          cd kernel_xiaomi_sdm845
          ZIP_NAME="Kernel-Hayasaka-${DEVICE_CODENAME}-${KERNEL_VERSION}-$(date +%d%m%Y).zip"

          cp out/arch/arm64/boot/Image.gz-dtb anykernel/
          cd anykernel
          sed -i "13s|.*|device.name1=$DEVICE_CODENAME|" anykernel.sh

          zip -r9 $ZIP_NAME ./*
          mv $ZIP_NAME ../../

          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: ü§å Copy zip file to get 2 different zip files
        run: |

          ZIP_ALTERNATIVE="KernelSU-Next-Hayasaka-${DEVICE_CODENAME}-latest.zip"
          cp ${ZIP_NAME} $ZIP_ALTERNATIVE

          echo "Copied ${ZIP_NAME} as $ZIP_ALTERNATIVE"
          echo "ZIP_ALTERNATIVE=$ZIP_ALTERNATIVE" >> $GITHUB_ENV


      - name: üöø Clean directories before next build
        run: |
          cd kernel_xiaomi_sdm845
          make clean


      - name: üîç Beryllium - codename and kernel's version
        run: |
          cd kernel_xiaomi_sdm845
          DEVICE_CODENAME=beryllium
          KERNEL_VERSION=$(make kernelversion | tail -n 2 | head -n 1)

          echo "Device Codename: $DEVICE_CODENAME"
          echo "Kernel Version: $KERNEL_VERSION"

          echo "DEVICE_CODENAME=$DEVICE_CODENAME" >> $GITHUB_ENV
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV

      - name: üõ†Ô∏è Build Beryllium's kramel
        run: |
          cd kernel_xiaomi_sdm845
          export ARCH=arm64
          export KBUILD_COMPILER_STRING=$(clang --version | head -n 1)
          export CCACHE_EXEC=$(which ccache)
          export KBUILD_BUILD_HOST="Hayasaka-Github-actions-Onelots"

          make O=out ARCH=arm64 vendor/xiaomi/mi845_defconfig vendor/debugfs.config vendor/kernelsu.config vendor/xiaomi/${DEVICE_CODENAME}.config V=1
          make O=out ARCH=arm64 olddefconfig
          make -j$(nproc --all) O=out -j"$(nproc --all)" \
          ARCH=arm64 \
          CC="ccache clang" \
          LLVM=1 \
          LLVM_IAS=1 \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-android- \
          CROSS_COMPILE_ARM32=arm-linux-androideabi-

      - name: üöÄ Copy Beryllium's kernel to AnyKernel3 then create the zip
        run: |
          cd kernel_xiaomi_sdm845
          ZIP_NAME="Kernel-Hayasaka-${DEVICE_CODENAME}-${KERNEL_VERSION}-$(date +%d%m%Y).zip"

          cp out/arch/arm64/boot/Image.gz-dtb anykernel/
          cd anykernel
          sed -i "13s|.*|device.name1=$DEVICE_CODENAME|" anykernel.sh

          zip -r9 $ZIP_NAME ./*
          mv $ZIP_NAME ../../

          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: ü§å Copy zip file to get 2 different zip files
        run: |

          ZIP_ALTERNATIVE="KernelSU-Next-Hayasaka-${DEVICE_CODENAME}-latest.zip"
          cp ${ZIP_NAME} $ZIP_ALTERNATIVE

          echo "Copied ${ZIP_NAME} as $ZIP_ALTERNATIVE"
          echo "ZIP_ALTERNATIVE=$ZIP_ALTERNATIVE" >> $GITHUB_ENV

      - name: üöø Clean directories before next build
        run: |
          cd kernel_xiaomi_sdm845
          make clean


      - name: üîç Dipper - codename and kernel's version
        run: |
          cd kernel_xiaomi_sdm845
          DEVICE_CODENAME=dipper
          KERNEL_VERSION=$(make kernelversion | tail -n 2 | head -n 1)

          echo "Device Codename: $DEVICE_CODENAME"
          echo "Kernel Version: $KERNEL_VERSION"

          echo "DEVICE_CODENAME=$DEVICE_CODENAME" >> $GITHUB_ENV
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV

      - name: üõ†Ô∏è Build Dipper's kramel
        run: |
          cd kernel_xiaomi_sdm845
          export ARCH=arm64
          export KBUILD_COMPILER_STRING=$(clang --version | head -n 1)
          export CCACHE_EXEC=$(which ccache)
          export KBUILD_BUILD_HOST="Hayasaka-Github-actions-Onelots"

          make O=out ARCH=arm64 vendor/xiaomi/mi845_defconfig vendor/debugfs.config vendor/kernelsu.config vendor/xiaomi/${DEVICE_CODENAME}.config V=1
          make O=out ARCH=arm64 olddefconfig
          make -j$(nproc --all) O=out -j"$(nproc --all)" \
          ARCH=arm64 \
          CC="ccache clang" \
          LLVM=1 \
          LLVM_IAS=1 \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-android- \
          CROSS_COMPILE_ARM32=arm-linux-androideabi-

      - name: üöÄ Copy Dipper's kernel to AnyKernel3 then create the zip
        run: |
          cd kernel_xiaomi_sdm845
          ZIP_NAME="Kernel-Hayasaka-${DEVICE_CODENAME}-${KERNEL_VERSION}-$(date +%d%m%Y).zip"

          cp out/arch/arm64/boot/Image.gz-dtb anykernel/
          cd anykernel
          sed -i "13s|.*|device.name1=$DEVICE_CODENAME|" anykernel.sh

          zip -r9 $ZIP_NAME ./*
          mv $ZIP_NAME ../../

          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: ü§å Copy zip file to get 2 different zip files
        run: |

          ZIP_ALTERNATIVE="KernelSU-Next-Hayasaka-${DEVICE_CODENAME}-latest.zip"
          cp ${ZIP_NAME} $ZIP_ALTERNATIVE

          echo "Copied ${ZIP_NAME} as $ZIP_ALTERNATIVE"
          echo "ZIP_ALTERNATIVE=$ZIP_ALTERNATIVE" >> $GITHUB_ENV

      - name: üöø Clean directories before next build
        run: |
          cd kernel_xiaomi_sdm845
          make clean


      - name: üîç Perseus - codename and kernel's version
        run: |
          cd kernel_xiaomi_sdm845
          DEVICE_CODENAME=perseus
          KERNEL_VERSION=$(make kernelversion | tail -n 2 | head -n 1)

          echo "Device Codename: $DEVICE_CODENAME"
          echo "Kernel Version: $KERNEL_VERSION"

          echo "DEVICE_CODENAME=$DEVICE_CODENAME" >> $GITHUB_ENV
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV

      - name: üõ†Ô∏è Build Perseus's kramel
        run: |
          cd kernel_xiaomi_sdm845
          export ARCH=arm64
          export KBUILD_COMPILER_STRING=$(clang --version | head -n 1)
          export CCACHE_EXEC=$(which ccache)
          export KBUILD_BUILD_HOST="Hayasaka-Github-actions-Onelots"

          make O=out ARCH=arm64 vendor/xiaomi/mi845_defconfig vendor/debugfs.config vendor/kernelsu.config vendor/xiaomi/${DEVICE_CODENAME}.config V=1
          make O=out ARCH=arm64 olddefconfig
          make -j$(nproc --all) O=out -j"$(nproc --all)" \
          ARCH=arm64 \
          CC="ccache clang" \
          LLVM=1 \
          LLVM_IAS=1 \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-android- \
          CROSS_COMPILE_ARM32=arm-linux-androideabi-

      - name: üöÄ Copy Perseus's kernel to AnyKernel3 then create the zip
        run: |
          cd kernel_xiaomi_sdm845
          ZIP_NAME="Kernel-Hayasaka-${DEVICE_CODENAME}-${KERNEL_VERSION}-$(date +%d%m%Y).zip"

          cp out/arch/arm64/boot/Image.gz-dtb anykernel/
          cd anykernel
          sed -i "13s|.*|device.name1=$DEVICE_CODENAME|" anykernel.sh

          zip -r9 $ZIP_NAME ./*
          mv $ZIP_NAME ../../

          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: ü§å Copy zip file to get 2 different zip files
        run: |

          ZIP_ALTERNATIVE="KernelSU-Next-Hayasaka-${DEVICE_CODENAME}-latest.zip"
          cp ${ZIP_NAME} $ZIP_ALTERNATIVE

          echo "Copied ${ZIP_NAME} as $ZIP_ALTERNATIVE"
          echo "ZIP_ALTERNATIVE=$ZIP_ALTERNATIVE" >> $GITHUB_ENV

      
      - name: üöø Clean directories before next build
        run: |
          cd kernel_xiaomi_sdm845
          make clean


      - name: üîç Ursa - codename and kernel's version
        run: |
          cd kernel_xiaomi_sdm845
          DEVICE_CODENAME=ursa
          KERNEL_VERSION=$(make kernelversion | tail -n 2 | head -n 1)

          echo "Device Codename: $DEVICE_CODENAME"
          echo "Kernel Version: $KERNEL_VERSION"

          echo "DEVICE_CODENAME=$DEVICE_CODENAME" >> $GITHUB_ENV
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV

      - name: üõ†Ô∏è Build Ursa's kramel
        run: |
          cd kernel_xiaomi_sdm845
          export ARCH=arm64
          export KBUILD_COMPILER_STRING=$(clang --version | head -n 1)
          export CCACHE_EXEC=$(which ccache)
          export KBUILD_BUILD_HOST="Hayasaka-Github-actions-Onelots"

          make O=out ARCH=arm64 vendor/xiaomi/mi845_defconfig vendor/debugfs.config vendor/kernelsu.config vendor/xiaomi/${DEVICE_CODENAME}.config V=1
          make O=out ARCH=arm64 olddefconfig
          make -j$(nproc --all) O=out -j"$(nproc --all)" \
          ARCH=arm64 \
          CC="ccache clang" \
          LLVM=1 \
          LLVM_IAS=1 \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-android- \
          CROSS_COMPILE_ARM32=arm-linux-androideabi-

      - name: üöÄ Copy Ursa's kernel to AnyKernel3 then create the zip
        run: |
          cd kernel_xiaomi_sdm845
          ZIP_NAME="Kernel-Hayasaka-${DEVICE_CODENAME}-${KERNEL_VERSION}-$(date +%d%m%Y).zip"

          cp out/arch/arm64/boot/Image.gz-dtb anykernel/
          cd anykernel
          sed -i "13s|.*|device.name1=$DEVICE_CODENAME|" anykernel.sh

          zip -r9 $ZIP_NAME ./*
          mv $ZIP_NAME ../../

          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: ü§å Copy zip file to get 2 different zip files
        run: |

          ZIP_ALTERNATIVE="KernelSU-Next-Hayasaka-${DEVICE_CODENAME}-latest.zip"
          cp ${ZIP_NAME} $ZIP_ALTERNATIVE

          echo "Copied ${ZIP_NAME} as $ZIP_ALTERNATIVE"
          echo "ZIP_ALTERNATIVE=$ZIP_ALTERNATIVE" >> $GITHUB_ENV


      - name: üöø Clean directories before next build
        run: |
          cd kernel_xiaomi_sdm845
          make clean


      - name: üîç Equuleus - codename and kernel's version
        run: |
          cd kernel_xiaomi_sdm845
          DEVICE_CODENAME=equuleus
          KERNEL_VERSION=$(make kernelversion | tail -n 2 | head -n 1)

          echo "Device Codename: $DEVICE_CODENAME"
          echo "Kernel Version: $KERNEL_VERSION"

          echo "DEVICE_CODENAME=$DEVICE_CODENAME" >> $GITHUB_ENV
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV

      - name: üõ†Ô∏è Build Equuleus's kramel
        run: |
          cd kernel_xiaomi_sdm845
          export ARCH=arm64
          export KBUILD_COMPILER_STRING=$(clang --version | head -n 1)
          export CCACHE_EXEC=$(which ccache)
          export KBUILD_BUILD_HOST="Hayasaka-Github-actions-Onelots"

          make O=out ARCH=arm64 vendor/xiaomi/mi845_defconfig vendor/debugfs.config vendor/kernelsu.config vendor/xiaomi/${DEVICE_CODENAME}.config V=1
          make O=out ARCH=arm64 olddefconfig
          make -j$(nproc --all) O=out -j"$(nproc --all)" \
          ARCH=arm64 \
          CC="ccache clang" \
          LLVM=1 \
          LLVM_IAS=1 \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-android- \
          CROSS_COMPILE_ARM32=arm-linux-androideabi-

      - name: üöÄ Copy Equuleus's kernel to AnyKernel3 then create the zip
        run: |
          cd kernel_xiaomi_sdm845
          ZIP_NAME="Kernel-Hayasaka-${DEVICE_CODENAME}-${KERNEL_VERSION}-$(date +%d%m%Y).zip"

          cp out/arch/arm64/boot/Image.gz-dtb anykernel/
          cd anykernel
          sed -i "13s|.*|device.name1=$DEVICE_CODENAME|" anykernel.sh

          zip -r9 $ZIP_NAME ./*
          mv $ZIP_NAME ../../

          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: ü§å Copy zip file to get 2 different zip files
        run: |

          ZIP_ALTERNATIVE="KernelSU-Next-Hayasaka-${DEVICE_CODENAME}-latest.zip"
          cp ${ZIP_NAME} $ZIP_ALTERNATIVE

          echo "Copied ${ZIP_NAME} as $ZIP_ALTERNATIVE"
          echo "ZIP_ALTERNATIVE=$ZIP_ALTERNATIVE" >> $GITHUB_ENV


      - name: üì§ Publish github release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "latest"
          draft: false
          files: | 
            KernelSU-Next-Hayasaka-polaris-latest.zip
            KernelSU-Next-Hayasaka-equuleus-latest.zip
            KernelSU-Next-Hayasaka-beryllium-latest.zip
            KernelSU-Next-Hayasaka-dipper-latest.zip
            KernelSU-Next-Hayasaka-ursa-latest.zip
            KernelSU-Next-Hayasaka-perseus-latest.zip

      - name: üì§ Publish with tag associated to the kernel
        uses: softprops/action-gh-release@v2
        with:
          tag_name: Kernel-Hayasaka-sdm845-serie-${{ env.KERNEL_VERSION }}-${{ env.DATE }}
          draft: false
          prerelease: false
          files: |
            Kernel-Hayasaka-polaris-${{ env.KERNEL_VERSION }}-${{ env.DATE }}.zip
            Kernel-Hayasaka-equuleus-${{ env.KERNEL_VERSION }}-${{ env.DATE }}.zip
            Kernel-Hayasaka-beryllium-${{ env.KERNEL_VERSION }}-${{ env.DATE }}.zip
            Kernel-Hayasaka-dipper-${{ env.KERNEL_VERSION }}-${{ env.DATE }}.zip
            Kernel-Hayasaka-ursa-${{ env.KERNEL_VERSION }}-${{ env.DATE }}.zip
            Kernel-Hayasaka-perseus-${{ env.KERNEL_VERSION }}-${{ env.DATE }}.zip

      - name: üöÄ Notify people on Discord
        env:
          DEVICE_CODENAME: sdm845-serie
          KERNEL_VERSION: ${{ env.KERNEL_VERSION }}
          WEBHOOK: ${{ secrets.WEBHOOK }}
          NAME: sdm845-serie
        run: |
          python3 .github/webhook.py
